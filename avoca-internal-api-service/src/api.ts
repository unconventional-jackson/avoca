/* tslint:disable */
/* eslint-disable */
/**
 * Avoca Internal API
 * Internal API for interacting with our Avoca customer support systems.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthChangePasswordRequestBody
 */
export interface AuthChangePasswordRequestBody {
    /**
     * The email address of the employee
     * @type {string}
     * @memberof AuthChangePasswordRequestBody
     */
    'email': string;
    /**
     * The employee\'s current password
     * @type {string}
     * @memberof AuthChangePasswordRequestBody
     */
    'current_password': string;
    /**
     * The employee\'s new password
     * @type {string}
     * @memberof AuthChangePasswordRequestBody
     */
    'new_password': string;
}
/**
 * 
 * @export
 * @interface AuthForgotPasswordRequestBody
 */
export interface AuthForgotPasswordRequestBody {
    /**
     * The email address of the employee requesting the password reset token.
     * @type {string}
     * @memberof AuthForgotPasswordRequestBody
     */
    'email': string;
}
/**
 * Request body for refreshing a token, to be used by all employees
 * @export
 * @interface AuthRefreshTokenRequestBody
 */
export interface AuthRefreshTokenRequestBody {
    /**
     * The refresh token
     * @type {string}
     * @memberof AuthRefreshTokenRequestBody
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface AuthResendVerificationRequestBody
 */
export interface AuthResendVerificationRequestBody {
    /**
     * The email address of the employee requesting the verification code.
     * @type {string}
     * @memberof AuthResendVerificationRequestBody
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthResetPasswordBody
 */
export interface AuthResetPasswordBody {
    /**
     * The employee\'s new password
     * @type {string}
     * @memberof AuthResetPasswordBody
     */
    'new_password': string;
    /**
     * The reset password token sent to the employee\'s email
     * @type {string}
     * @memberof AuthResetPasswordBody
     */
    'token': string;
    /**
     * The email address of the employee (optional if employee_id is provided in the session)
     * @type {string}
     * @memberof AuthResetPasswordBody
     */
    'email'?: string;
}
/**
 * Request body for signing in a employee, only to be used by admin employees or operator employees
 * @export
 * @interface AuthSignInRequestBody
 */
export interface AuthSignInRequestBody {
    /**
     * The employee\'s email address
     * @type {string}
     * @memberof AuthSignInRequestBody
     */
    'email': string;
    /**
     * The employee\'s password
     * @type {string}
     * @memberof AuthSignInRequestBody
     */
    'password': string;
}
/**
 * Request body for signing up a employee, only to be used by admin employees or operator employees
 * @export
 * @interface AuthSignUpRequestBody
 */
export interface AuthSignUpRequestBody {
    /**
     * The employee\'s email address
     * @type {string}
     * @memberof AuthSignUpRequestBody
     */
    'email': string;
    /**
     * The employee\'s password
     * @type {string}
     * @memberof AuthSignUpRequestBody
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthTOTPSetupRequestBody
 */
export interface AuthTOTPSetupRequestBody {
    /**
     * Email address of the employee for whom TOTP is being set up
     * @type {string}
     * @memberof AuthTOTPSetupRequestBody
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthTOTPVerifyRequestBody
 */
export interface AuthTOTPVerifyRequestBody {
    /**
     * Email address of the employee verifying TOTP
     * @type {string}
     * @memberof AuthTOTPVerifyRequestBody
     */
    'email': string;
    /**
     * The TOTP token to verify
     * @type {string}
     * @memberof AuthTOTPVerifyRequestBody
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface AuthUser
 */
export interface AuthUser {
    /**
     * The unique ID of the employee
     * @type {string}
     * @memberof AuthUser
     */
    'employee_id'?: string;
    /**
     * The employee\'s email address
     * @type {string}
     * @memberof AuthUser
     */
    'email'?: string;
    /**
     * The last time the employee was active
     * @type {string}
     * @memberof AuthUser
     */
    'last_active_at'?: string | null;
    /**
     * JWT access token for employee authentication
     * @type {string}
     * @memberof AuthUser
     */
    'access_token'?: string | null;
    /**
     * JWT refresh token for employee session renewal
     * @type {string}
     * @memberof AuthUser
     */
    'refresh_token'?: string | null;
    /**
     * Indicates if the email is verified
     * @type {boolean}
     * @memberof AuthUser
     */
    'auth_email_verified'?: boolean | null;
    /**
     * Timestamp of the last TOTP verification
     * @type {string}
     * @memberof AuthUser
     */
    'auth_totp_verified_at'?: string | null;
    /**
     * Indicates if TOTP is enabled for the employee
     * @type {boolean}
     * @memberof AuthUser
     */
    'auth_totp_enabled'?: boolean | null;
}
/**
 * 
 * @export
 * @interface AuthVerifyEmailRequestBody
 */
export interface AuthVerifyEmailRequestBody {
    /**
     * The admin or operator employee\'s email address
     * @type {string}
     * @memberof AuthVerifyEmailRequestBody
     */
    'email': string;
    /**
     * TOTP verification code sent to the employee\'s email
     * @type {string}
     * @memberof AuthVerifyEmailRequestBody
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CreatePhoneCallRequest
 */
export interface CreatePhoneCallRequest {
    /**
     * The start of the phone call
     * @type {string}
     * @memberof CreatePhoneCallRequest
     */
    'start_date_time': string;
    /**
     * The end of the phone call
     * @type {string}
     * @memberof CreatePhoneCallRequest
     */
    'end_date_time'?: string;
    /**
     * The transcript
     * @type {string}
     * @memberof CreatePhoneCallRequest
     */
    'transcript'?: string;
    /**
     * The customer that this phone call is associated with
     * @type {string}
     * @memberof CreatePhoneCallRequest
     */
    'customer_id'?: string;
    /**
     * The phone number that the call came from
     * @type {string}
     * @memberof CreatePhoneCallRequest
     */
    'phone_number': string;
    /**
     * The job that this phone call is associated with
     * @type {string}
     * @memberof CreatePhoneCallRequest
     */
    'job_id'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ForgotPassword200Response
 */
export interface ForgotPassword200Response {
    /**
     * 
     * @type {string}
     * @memberof ForgotPassword200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetPhoneCallsResponse
 */
export interface GetPhoneCallsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetPhoneCallsResponse
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetPhoneCallsResponse
     */
    'page_size'?: number;
    /**
     * 
     * @type {Array<PhoneCall>}
     * @memberof GetPhoneCallsResponse
     */
    'phone_calls'?: Array<PhoneCall>;
    /**
     * 
     * @type {number}
     * @memberof GetPhoneCallsResponse
     */
    'total_items'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetPhoneCallsResponse
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface PhoneCall
 */
export interface PhoneCall {
    /**
     * The unique identifier for the phone call; this is our own construct
     * @type {string}
     * @memberof PhoneCall
     */
    'phone_call_id'?: string;
    /**
     * The start of the phone call
     * @type {string}
     * @memberof PhoneCall
     */
    'start_date_time'?: string;
    /**
     * The end of the phone call
     * @type {string}
     * @memberof PhoneCall
     */
    'end_date_time'?: string;
    /**
     * The transcript
     * @type {string}
     * @memberof PhoneCall
     */
    'transcript'?: string;
    /**
     * The customer that this phone call is associated with
     * @type {string}
     * @memberof PhoneCall
     */
    'customer_id'?: string;
    /**
     * The phone number that the call came from
     * @type {string}
     * @memberof PhoneCall
     */
    'phone_number'?: string;
    /**
     * The job that this phone call is associated with
     * @type {string}
     * @memberof PhoneCall
     */
    'job_id'?: string;
    /**
     * The employee that accepted the phone call
     * @type {string}
     * @memberof PhoneCall
     */
    'employee_id'?: string;
}
/**
 * 
 * @export
 * @interface RefreshToken200Response
 */
export interface RefreshToken200Response {
    /**
     * 
     * @type {string}
     * @memberof RefreshToken200Response
     */
    'access_token'?: string;
}
/**
 * 
 * @export
 * @interface ResendVerification201Response
 */
export interface ResendVerification201Response {
    /**
     * 
     * @type {string}
     * @memberof ResendVerification201Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ResetPassword200Response
 */
export interface ResetPassword200Response {
    /**
     * 
     * @type {string}
     * @memberof ResetPassword200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface SignIn200Response
 */
export interface SignIn200Response {
    /**
     * 
     * @type {string}
     * @memberof SignIn200Response
     */
    'message'?: string;
    /**
     * 
     * @type {AuthUser}
     * @memberof SignIn200Response
     */
    'employee'?: AuthUser;
}
/**
 * 
 * @export
 * @interface SignUp201Response
 */
export interface SignUp201Response {
    /**
     * 
     * @type {string}
     * @memberof SignUp201Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface SignUp400Response
 */
export interface SignUp400Response {
    /**
     * 
     * @type {string}
     * @memberof SignUp400Response
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TotpSetup200Response
 */
export interface TotpSetup200Response {
    /**
     * URL for configuring TOTP in a compatible app
     * @type {string}
     * @memberof TotpSetup200Response
     */
    'otpauth_url'?: string;
}
/**
 * 
 * @export
 * @interface TotpVerify200Response
 */
export interface TotpVerify200Response {
    /**
     * 
     * @type {string}
     * @memberof TotpVerify200Response
     */
    'message'?: string;
    /**
     * 
     * @type {AuthUser}
     * @memberof TotpVerify200Response
     */
    'employee'?: AuthUser;
}
/**
 * 
 * @export
 * @interface UpdatePhoneCallRequestBody
 */
export interface UpdatePhoneCallRequestBody {
    /**
     * The end of the phone call
     * @type {string}
     * @memberof UpdatePhoneCallRequestBody
     */
    'end_date_time'?: string;
    /**
     * The transcript
     * @type {string}
     * @memberof UpdatePhoneCallRequestBody
     */
    'transcript'?: string;
    /**
     * The employee that accepted the phone call
     * @type {string}
     * @memberof UpdatePhoneCallRequestBody
     */
    'employee_id'?: string;
    /**
     * The job that this phone call is associated with
     * @type {string}
     * @memberof UpdatePhoneCallRequestBody
     */
    'job_id'?: string;
    /**
     * The customer that this phone call is associated with
     * @type {string}
     * @memberof UpdatePhoneCallRequestBody
     */
    'customer_id'?: string;
}
/**
 * 
 * @export
 * @interface VerifyEmail200Response
 */
export interface VerifyEmail200Response {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmail200Response
     */
    'message'?: string;
    /**
     * 
     * @type {AuthUser}
     * @memberof VerifyEmail200Response
     */
    'employee'?: AuthUser;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts a phone call in the system, assigning it to the employee that accepts it.
         * @summary Accept a phone call
         * @param {string} phoneCallId The unique identifier for the phone call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptPhoneCall: async (phoneCallId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneCallId' is not null or undefined
            assertParamExists('acceptPhoneCall', 'phoneCallId', phoneCallId)
            const localVarPath = `/phone-calls/{phone_call_id}/accept`
                .replace(`{${"phone_call_id"}}`, encodeURIComponent(String(phoneCallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a employee\'s password by verifying the current password.
         * @summary Change employee password
         * @param {AuthChangePasswordRequestBody} authChangePasswordRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (authChangePasswordRequestBody: AuthChangePasswordRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authChangePasswordRequestBody' is not null or undefined
            assertParamExists('changePassword', 'authChangePasswordRequestBody', authChangePasswordRequestBody)
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authChangePasswordRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new phone call in the system.
         * @summary Create a new phone call
         * @param {CreatePhoneCallRequest} createPhoneCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneCall: async (createPhoneCallRequest: CreatePhoneCallRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPhoneCallRequest' is not null or undefined
            assertParamExists('createPhoneCall', 'createPhoneCallRequest', createPhoneCallRequest)
            const localVarPath = `/phone-calls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPhoneCallRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a password reset token to the employee\'s email if the email is registered.
         * @summary Request password reset token
         * @param {AuthForgotPasswordRequestBody} authForgotPasswordRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (authForgotPasswordRequestBody: AuthForgotPasswordRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordRequestBody' is not null or undefined
            assertParamExists('forgotPassword', 'authForgotPasswordRequestBody', authForgotPasswordRequestBody)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all phone calls in the system.
         * @summary Get all phone calls
         * @param {number} [page] The page number to retrieve
         * @param {number} [pageSize] The number of items per page
         * @param {GetPhoneCallsSortByEnum} [sortBy] The field to sort by
         * @param {GetPhoneCallsSortDirectionEnum} [sortDirection] The direction to sort by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneCalls: async (page?: number, pageSize?: number, sortBy?: GetPhoneCallsSortByEnum, sortDirection?: GetPhoneCallsSortDirectionEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/phone-calls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies a TOTP token for a standard employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
         * @summary Verify a employee authentication request
         * @param {AuthRefreshTokenRequestBody} authRefreshTokenRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (authRefreshTokenRequestBody: AuthRefreshTokenRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRefreshTokenRequestBody' is not null or undefined
            assertParamExists('refreshToken', 'authRefreshTokenRequestBody', authRefreshTokenRequestBody)
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRefreshTokenRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resends a TOTP email verification code to the specified employee email, if the employee exists and has not verified their email.
         * @summary Resend email verification code
         * @param {AuthResendVerificationRequestBody} authResendVerificationRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendVerification: async (authResendVerificationRequestBody: AuthResendVerificationRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResendVerificationRequestBody' is not null or undefined
            assertParamExists('resendVerification', 'authResendVerificationRequestBody', authResendVerificationRequestBody)
            const localVarPath = `/auth/resend-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResendVerificationRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets a employee\'s password using a provided token and new password.
         * @summary Reset employee password
         * @param {AuthResetPasswordBody} authResetPasswordBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (authResetPasswordBody: AuthResetPasswordBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordBody' is not null or undefined
            assertParamExists('resetPassword', 'authResetPasswordBody', authResetPasswordBody)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticates a employee and provides access and refresh tokens if successful.
         * @summary Sign in a employee
         * @param {AuthSignInRequestBody} authSignInRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (authSignInRequestBody: AuthSignInRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignInRequestBody' is not null or undefined
            assertParamExists('signIn', 'authSignInRequestBody', authSignInRequestBody)
            const localVarPath = `/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignInRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new employee account and sends an email verification code.
         * @summary Sign up a new employee
         * @param {AuthSignUpRequestBody} authSignUpRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (authSignUpRequestBody: AuthSignUpRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignUpRequestBody' is not null or undefined
            assertParamExists('signUp', 'authSignUpRequestBody', authSignUpRequestBody)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignUpRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a TOTP secret and returns the otpauth URL for configuring TOTP on a employee account.
         * @summary Setup TOTP for employee
         * @param {AuthTOTPSetupRequestBody} authTOTPSetupRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totpSetup: async (authTOTPSetupRequestBody: AuthTOTPSetupRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authTOTPSetupRequestBody' is not null or undefined
            assertParamExists('totpSetup', 'authTOTPSetupRequestBody', authTOTPSetupRequestBody)
            const localVarPath = `/auth/totp/setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authTOTPSetupRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies a TOTP token for a employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
         * @summary Verify TOTP for employee
         * @param {AuthTOTPVerifyRequestBody} authTOTPVerifyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totpVerify: async (authTOTPVerifyRequestBody: AuthTOTPVerifyRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authTOTPVerifyRequestBody' is not null or undefined
            assertParamExists('totpVerify', 'authTOTPVerifyRequestBody', authTOTPVerifyRequestBody)
            const localVarPath = `/auth/totp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authTOTPVerifyRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a phone call in the system.
         * @summary Update a phone call
         * @param {string} phoneCallId The unique identifier for the phone call
         * @param {UpdatePhoneCallRequestBody} updatePhoneCallRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneCall: async (phoneCallId: string, updatePhoneCallRequestBody: UpdatePhoneCallRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneCallId' is not null or undefined
            assertParamExists('updatePhoneCall', 'phoneCallId', phoneCallId)
            // verify required parameter 'updatePhoneCallRequestBody' is not null or undefined
            assertParamExists('updatePhoneCall', 'updatePhoneCallRequestBody', updatePhoneCallRequestBody)
            const localVarPath = `/phene-calls/{phone_call_id}`
                .replace(`{${"phone_call_id"}}`, encodeURIComponent(String(phoneCallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePhoneCallRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies a employee\'s email address with a TOTP verification code, updating the email verification status.
         * @summary Verify employee email
         * @param {AuthVerifyEmailRequestBody} authVerifyEmailRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (authVerifyEmailRequestBody: AuthVerifyEmailRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authVerifyEmailRequestBody' is not null or undefined
            assertParamExists('verifyEmail', 'authVerifyEmailRequestBody', authVerifyEmailRequestBody)
            const localVarPath = `/auth/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authVerifyEmailRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts a phone call in the system, assigning it to the employee that accepts it.
         * @summary Accept a phone call
         * @param {string} phoneCallId The unique identifier for the phone call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptPhoneCall(phoneCallId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneCall>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptPhoneCall(phoneCallId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acceptPhoneCall']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Changes a employee\'s password by verifying the current password.
         * @summary Change employee password
         * @param {AuthChangePasswordRequestBody} authChangePasswordRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(authChangePasswordRequestBody: AuthChangePasswordRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(authChangePasswordRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new phone call in the system.
         * @summary Create a new phone call
         * @param {CreatePhoneCallRequest} createPhoneCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoneCall(createPhoneCallRequest: CreatePhoneCallRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneCall>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoneCall(createPhoneCallRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPhoneCall']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends a password reset token to the employee\'s email if the email is registered.
         * @summary Request password reset token
         * @param {AuthForgotPasswordRequestBody} authForgotPasswordRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(authForgotPasswordRequestBody: AuthForgotPasswordRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForgotPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(authForgotPasswordRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all phone calls in the system.
         * @summary Get all phone calls
         * @param {number} [page] The page number to retrieve
         * @param {number} [pageSize] The number of items per page
         * @param {GetPhoneCallsSortByEnum} [sortBy] The field to sort by
         * @param {GetPhoneCallsSortDirectionEnum} [sortDirection] The direction to sort by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneCalls(page?: number, pageSize?: number, sortBy?: GetPhoneCallsSortByEnum, sortDirection?: GetPhoneCallsSortDirectionEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPhoneCallsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneCalls(page, pageSize, sortBy, sortDirection, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPhoneCalls']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies a TOTP token for a standard employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
         * @summary Verify a employee authentication request
         * @param {AuthRefreshTokenRequestBody} authRefreshTokenRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(authRefreshTokenRequestBody: AuthRefreshTokenRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(authRefreshTokenRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resends a TOTP email verification code to the specified employee email, if the employee exists and has not verified their email.
         * @summary Resend email verification code
         * @param {AuthResendVerificationRequestBody} authResendVerificationRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendVerification(authResendVerificationRequestBody: AuthResendVerificationRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResendVerification201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendVerification(authResendVerificationRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.resendVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resets a employee\'s password using a provided token and new password.
         * @summary Reset employee password
         * @param {AuthResetPasswordBody} authResetPasswordBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(authResetPasswordBody: AuthResetPasswordBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(authResetPasswordBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authenticates a employee and provides access and refresh tokens if successful.
         * @summary Sign in a employee
         * @param {AuthSignInRequestBody} authSignInRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(authSignInRequestBody: AuthSignInRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignIn200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(authSignInRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.signIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new employee account and sends an email verification code.
         * @summary Sign up a new employee
         * @param {AuthSignUpRequestBody} authSignUpRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(authSignUpRequestBody: AuthSignUpRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUp201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(authSignUpRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.signUp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates a TOTP secret and returns the otpauth URL for configuring TOTP on a employee account.
         * @summary Setup TOTP for employee
         * @param {AuthTOTPSetupRequestBody} authTOTPSetupRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async totpSetup(authTOTPSetupRequestBody: AuthTOTPSetupRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TotpSetup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.totpSetup(authTOTPSetupRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.totpSetup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies a TOTP token for a employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
         * @summary Verify TOTP for employee
         * @param {AuthTOTPVerifyRequestBody} authTOTPVerifyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async totpVerify(authTOTPVerifyRequestBody: AuthTOTPVerifyRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TotpVerify200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.totpVerify(authTOTPVerifyRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.totpVerify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a phone call in the system.
         * @summary Update a phone call
         * @param {string} phoneCallId The unique identifier for the phone call
         * @param {UpdatePhoneCallRequestBody} updatePhoneCallRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhoneCall(phoneCallId: string, updatePhoneCallRequestBody: UpdatePhoneCallRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneCall>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhoneCall(phoneCallId, updatePhoneCallRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updatePhoneCall']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies a employee\'s email address with a TOTP verification code, updating the email verification status.
         * @summary Verify employee email
         * @param {AuthVerifyEmailRequestBody} authVerifyEmailRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(authVerifyEmailRequestBody: AuthVerifyEmailRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyEmail200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(authVerifyEmailRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Accepts a phone call in the system, assigning it to the employee that accepts it.
         * @summary Accept a phone call
         * @param {string} phoneCallId The unique identifier for the phone call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptPhoneCall(phoneCallId: string, options?: RawAxiosRequestConfig): AxiosPromise<PhoneCall> {
            return localVarFp.acceptPhoneCall(phoneCallId, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes a employee\'s password by verifying the current password.
         * @summary Change employee password
         * @param {AuthChangePasswordRequestBody} authChangePasswordRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(authChangePasswordRequestBody: AuthChangePasswordRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<ResetPassword200Response> {
            return localVarFp.changePassword(authChangePasswordRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new phone call in the system.
         * @summary Create a new phone call
         * @param {CreatePhoneCallRequest} createPhoneCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneCall(createPhoneCallRequest: CreatePhoneCallRequest, options?: RawAxiosRequestConfig): AxiosPromise<PhoneCall> {
            return localVarFp.createPhoneCall(createPhoneCallRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a password reset token to the employee\'s email if the email is registered.
         * @summary Request password reset token
         * @param {AuthForgotPasswordRequestBody} authForgotPasswordRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(authForgotPasswordRequestBody: AuthForgotPasswordRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<ForgotPassword200Response> {
            return localVarFp.forgotPassword(authForgotPasswordRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all phone calls in the system.
         * @summary Get all phone calls
         * @param {number} [page] The page number to retrieve
         * @param {number} [pageSize] The number of items per page
         * @param {GetPhoneCallsSortByEnum} [sortBy] The field to sort by
         * @param {GetPhoneCallsSortDirectionEnum} [sortDirection] The direction to sort by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneCalls(page?: number, pageSize?: number, sortBy?: GetPhoneCallsSortByEnum, sortDirection?: GetPhoneCallsSortDirectionEnum, options?: RawAxiosRequestConfig): AxiosPromise<GetPhoneCallsResponse> {
            return localVarFp.getPhoneCalls(page, pageSize, sortBy, sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies a TOTP token for a standard employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
         * @summary Verify a employee authentication request
         * @param {AuthRefreshTokenRequestBody} authRefreshTokenRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(authRefreshTokenRequestBody: AuthRefreshTokenRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<RefreshToken200Response> {
            return localVarFp.refreshToken(authRefreshTokenRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Resends a TOTP email verification code to the specified employee email, if the employee exists and has not verified their email.
         * @summary Resend email verification code
         * @param {AuthResendVerificationRequestBody} authResendVerificationRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendVerification(authResendVerificationRequestBody: AuthResendVerificationRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<ResendVerification201Response> {
            return localVarFp.resendVerification(authResendVerificationRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets a employee\'s password using a provided token and new password.
         * @summary Reset employee password
         * @param {AuthResetPasswordBody} authResetPasswordBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(authResetPasswordBody: AuthResetPasswordBody, options?: RawAxiosRequestConfig): AxiosPromise<ResetPassword200Response> {
            return localVarFp.resetPassword(authResetPasswordBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticates a employee and provides access and refresh tokens if successful.
         * @summary Sign in a employee
         * @param {AuthSignInRequestBody} authSignInRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(authSignInRequestBody: AuthSignInRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<SignIn200Response> {
            return localVarFp.signIn(authSignInRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new employee account and sends an email verification code.
         * @summary Sign up a new employee
         * @param {AuthSignUpRequestBody} authSignUpRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(authSignUpRequestBody: AuthSignUpRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<SignUp201Response> {
            return localVarFp.signUp(authSignUpRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a TOTP secret and returns the otpauth URL for configuring TOTP on a employee account.
         * @summary Setup TOTP for employee
         * @param {AuthTOTPSetupRequestBody} authTOTPSetupRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totpSetup(authTOTPSetupRequestBody: AuthTOTPSetupRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<TotpSetup200Response> {
            return localVarFp.totpSetup(authTOTPSetupRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies a TOTP token for a employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
         * @summary Verify TOTP for employee
         * @param {AuthTOTPVerifyRequestBody} authTOTPVerifyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totpVerify(authTOTPVerifyRequestBody: AuthTOTPVerifyRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<TotpVerify200Response> {
            return localVarFp.totpVerify(authTOTPVerifyRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a phone call in the system.
         * @summary Update a phone call
         * @param {string} phoneCallId The unique identifier for the phone call
         * @param {UpdatePhoneCallRequestBody} updatePhoneCallRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneCall(phoneCallId: string, updatePhoneCallRequestBody: UpdatePhoneCallRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<PhoneCall> {
            return localVarFp.updatePhoneCall(phoneCallId, updatePhoneCallRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies a employee\'s email address with a TOTP verification code, updating the email verification status.
         * @summary Verify employee email
         * @param {AuthVerifyEmailRequestBody} authVerifyEmailRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail(authVerifyEmailRequestBody: AuthVerifyEmailRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<VerifyEmail200Response> {
            return localVarFp.verifyEmail(authVerifyEmailRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Accepts a phone call in the system, assigning it to the employee that accepts it.
     * @summary Accept a phone call
     * @param {string} phoneCallId The unique identifier for the phone call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acceptPhoneCall(phoneCallId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acceptPhoneCall(phoneCallId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes a employee\'s password by verifying the current password.
     * @summary Change employee password
     * @param {AuthChangePasswordRequestBody} authChangePasswordRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changePassword(authChangePasswordRequestBody: AuthChangePasswordRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).changePassword(authChangePasswordRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new phone call in the system.
     * @summary Create a new phone call
     * @param {CreatePhoneCallRequest} createPhoneCallRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPhoneCall(createPhoneCallRequest: CreatePhoneCallRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPhoneCall(createPhoneCallRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a password reset token to the employee\'s email if the email is registered.
     * @summary Request password reset token
     * @param {AuthForgotPasswordRequestBody} authForgotPasswordRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public forgotPassword(authForgotPasswordRequestBody: AuthForgotPasswordRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).forgotPassword(authForgotPasswordRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all phone calls in the system.
     * @summary Get all phone calls
     * @param {number} [page] The page number to retrieve
     * @param {number} [pageSize] The number of items per page
     * @param {GetPhoneCallsSortByEnum} [sortBy] The field to sort by
     * @param {GetPhoneCallsSortDirectionEnum} [sortDirection] The direction to sort by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPhoneCalls(page?: number, pageSize?: number, sortBy?: GetPhoneCallsSortByEnum, sortDirection?: GetPhoneCallsSortDirectionEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPhoneCalls(page, pageSize, sortBy, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies a TOTP token for a standard employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
     * @summary Verify a employee authentication request
     * @param {AuthRefreshTokenRequestBody} authRefreshTokenRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(authRefreshTokenRequestBody: AuthRefreshTokenRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(authRefreshTokenRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resends a TOTP email verification code to the specified employee email, if the employee exists and has not verified their email.
     * @summary Resend email verification code
     * @param {AuthResendVerificationRequestBody} authResendVerificationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resendVerification(authResendVerificationRequestBody: AuthResendVerificationRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resendVerification(authResendVerificationRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resets a employee\'s password using a provided token and new password.
     * @summary Reset employee password
     * @param {AuthResetPasswordBody} authResetPasswordBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetPassword(authResetPasswordBody: AuthResetPasswordBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resetPassword(authResetPasswordBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticates a employee and provides access and refresh tokens if successful.
     * @summary Sign in a employee
     * @param {AuthSignInRequestBody} authSignInRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signIn(authSignInRequestBody: AuthSignInRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signIn(authSignInRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new employee account and sends an email verification code.
     * @summary Sign up a new employee
     * @param {AuthSignUpRequestBody} authSignUpRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signUp(authSignUpRequestBody: AuthSignUpRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signUp(authSignUpRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a TOTP secret and returns the otpauth URL for configuring TOTP on a employee account.
     * @summary Setup TOTP for employee
     * @param {AuthTOTPSetupRequestBody} authTOTPSetupRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public totpSetup(authTOTPSetupRequestBody: AuthTOTPSetupRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).totpSetup(authTOTPSetupRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies a TOTP token for a employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.
     * @summary Verify TOTP for employee
     * @param {AuthTOTPVerifyRequestBody} authTOTPVerifyRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public totpVerify(authTOTPVerifyRequestBody: AuthTOTPVerifyRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).totpVerify(authTOTPVerifyRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a phone call in the system.
     * @summary Update a phone call
     * @param {string} phoneCallId The unique identifier for the phone call
     * @param {UpdatePhoneCallRequestBody} updatePhoneCallRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePhoneCall(phoneCallId: string, updatePhoneCallRequestBody: UpdatePhoneCallRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePhoneCall(phoneCallId, updatePhoneCallRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies a employee\'s email address with a TOTP verification code, updating the email verification status.
     * @summary Verify employee email
     * @param {AuthVerifyEmailRequestBody} authVerifyEmailRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyEmail(authVerifyEmailRequestBody: AuthVerifyEmailRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyEmail(authVerifyEmailRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPhoneCallsSortByEnum = {
    StartDateTime: 'start_date_time',
    EndDateTime: 'end_date_time',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
} as const;
export type GetPhoneCallsSortByEnum = typeof GetPhoneCallsSortByEnum[keyof typeof GetPhoneCallsSortByEnum];
/**
 * @export
 */
export const GetPhoneCallsSortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetPhoneCallsSortDirectionEnum = typeof GetPhoneCallsSortDirectionEnum[keyof typeof GetPhoneCallsSortDirectionEnum];


