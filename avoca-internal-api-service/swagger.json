{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Avoca Internal API",
    "description": "Internal API for interacting with our Avoca customer support systems.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },

  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Sign up a new employee",
        "description": "Creates a new employee account and sends an email verification code.",
        "operationId": "signUp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthSignUpRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Employee created. Verify your email."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid data"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "summary": "Sign in a employee",
        "description": "Authenticates a employee and provides access and refresh tokens if successful.",
        "operationId": "signIn",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthSignInRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign-in successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sign-in successful"
                    },
                    "employee": { "$ref": "#/components/schemas/AuthUser" }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid data"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Unauthorized - invalid credentials or unverified email"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/verify-email": {
      "post": {
        "summary": "Verify employee email",
        "description": "Verifies a employee's email address with a TOTP verification code, updating the email verification status.",
        "operationId": "verifyEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthVerifyEmailRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email verified successfully."
                    },
                    "employee": { "$ref": "#/components/schemas/AuthUser" }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid data"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Request password reset token",
        "description": "Sends a password reset token to the employee's email if the email is registered.",
        "operationId": "forgotPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthForgotPasswordRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset token sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset token sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing email"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset employee password",
        "description": "Resets a employee's password using a provided token and new password.",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResetPasswordBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid fields"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "summary": "Change employee password",
        "description": "Changes a employee's password by verifying the current password.",
        "operationId": "changePassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthChangePasswordRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid fields"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/totp/setup": {
      "post": {
        "summary": "Setup TOTP for employee",
        "description": "Generates a TOTP secret and returns the otpauth URL for configuring TOTP on a employee account.",
        "operationId": "totpSetup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTOTPSetupRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TOTP setup URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "otpauth_url": {
                      "type": "string",
                      "description": "URL for configuring TOTP in a compatible app"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/totp/verify": {
      "post": {
        "summary": "Verify TOTP for employee",
        "description": "Verifies a TOTP token for a employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.",
        "operationId": "totpVerify",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTOTPVerifyRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TOTP verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "TOTP verified successfully"
                    },
                    "employee": { "$ref": "#/components/schemas/AuthUser" }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Invalid TOTP token or missing data"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not found or TOTP not set up"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/resend-verification": {
      "post": {
        "summary": "Resend email verification code",
        "description": "Resends a TOTP email verification code to the specified employee email, if the employee exists and has not verified their email.",
        "operationId": "resendVerification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResendVerificationRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Verification email resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Verification email resent. Verify your email."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - email is missing or email is already verified"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "summary": "Verify a employee authentication request",
        "description": "Verifies a TOTP token for a standard employee. If the token is valid, enables TOTP for the employee and issues new access and refresh tokens.",
        "operationId": "refreshToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRefreshTokenRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Invalid refresh token or missing data"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Employee not authorized or refresh token expired"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/phone-calls": {
      "get": {
        "summary": "Get all phone calls",
        "description": "Retrieves all phone calls in the system.",
        "operationId": "getPhoneCalls",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "description": "The field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "start_date_time",
                "end_date_time",
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone calls retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPhoneCallsResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new phone call",
        "description": "Creates a new phone call in the system.",
        "operationId": "createPhoneCall",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start_date_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start of the phone call"
                  },
                  "end_date_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end of the phone call"
                  },
                  "transcript": {
                    "type": "string",
                    "description": "The transcript"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "The customer that this phone call is associated with"
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "The phone number that the call came from"
                  },
                  "job_id": {
                    "type": "string",
                    "description": "The job that this phone call is associated with"
                  }
                },
                "required": ["start_date_time", "phone_number"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Phone call created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneCall"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid data"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/phone-calls/{phone_call_id}": {
      "put": {
        "summary": "Update a phone call",
        "description": "Updates a phone call in the system.",
        "operationId": "updatePhoneCall",
        "parameters": [
          {
            "name": "phone_call_id",
            "in": "path",
            "description": "The unique identifier for the phone call",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneCallRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone call updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneCall"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid data"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Phone call not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    },
    "/phone-calls/{phone_call_id}/accept": {
      "post": {
        "summary": "Accept a phone call",
        "description": "Accepts a phone call in the system, assigning it to the employee that accepts it.",
        "operationId": "acceptPhoneCall",
        "parameters": [
          {
            "name": "phone_call_id",
            "in": "path",
            "description": "The unique identifier for the phone call",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone call accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneCall"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Bad request - missing or invalid data"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Phone call not found"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse",
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Detailed error message"
                }
              },
              "required": ["error"],
              "additionalProperties": false,
              "example": {
                "error": "Detailed error message",
                "message": "Error message"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "AuthRefreshTokenRequestBody": {
        "type": "object",
        "description": "Request body for refreshing a token, to be used by all employees",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The refresh token"
          }
        },
        "required": ["refresh_token"]
      },
      "AuthSignUpRequestBody": {
        "type": "object",
        "description": "Request body for signing up a employee, only to be used by admin employees or operator employees",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The employee's email address"
          },
          "password": {
            "type": "string",
            "description": "The employee's password"
          }
        },
        "required": ["email", "password"]
      },
      "AuthSignInRequestBody": {
        "type": "object",
        "description": "Request body for signing in a employee, only to be used by admin employees or operator employees",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The employee's email address"
          },
          "password": {
            "type": "string",
            "description": "The employee's password"
          }
        },
        "required": ["email", "password"]
      },
      "AuthUser": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "The unique ID of the employee"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The employee's email address"
          },
          "last_active_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The last time the employee was active"
          },
          "access_token": {
            "type": "string",
            "description": "JWT access token for employee authentication",
            "nullable": true
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token for employee session renewal",
            "nullable": true
          },
          "auth_email_verified": {
            "type": "boolean",
            "description": "Indicates if the email is verified",
            "nullable": true
          },
          "auth_totp_verified_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of the last TOTP verification"
          },
          "auth_totp_enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if TOTP is enabled for the employee"
          }
        }
      },
      "AuthVerifyEmailRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The admin or operator employee's email address"
          },
          "token": {
            "type": "string",
            "description": "TOTP verification code sent to the employee's email"
          }
        },
        "required": ["email", "token"]
      },
      "AuthResendVerificationRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the employee requesting the verification code."
          }
        },
        "required": ["email"]
      },
      "AuthForgotPasswordRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the employee requesting the password reset token."
          }
        },
        "required": ["email"]
      },
      "AuthResetPasswordBody": {
        "type": "object",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "The employee's new password"
          },
          "token": {
            "type": "string",
            "description": "The reset password token sent to the employee's email"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the employee (optional if employee_id is provided in the session)"
          }
        },
        "required": ["new_password", "token"]
      },
      "AuthChangePasswordRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the employee"
          },
          "current_password": {
            "type": "string",
            "description": "The employee's current password"
          },
          "new_password": {
            "type": "string",
            "description": "The employee's new password"
          }
        },
        "required": ["email", "current_password", "new_password"]
      },
      "AuthTOTPSetupRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the employee for whom TOTP is being set up"
          }
        },
        "required": ["email"]
      },
      "AuthTOTPVerifyRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the employee verifying TOTP"
          },
          "token": {
            "type": "string",
            "description": "The TOTP token to verify"
          }
        },
        "required": ["email", "token"]
      },
      "PhoneCall": {
        "type": "object",
        "properties": {
          "phone_call_id": {
            "description": "The unique identifier for the phone call; this is our own construct",
            "type": "string"
          },
          "start_date_time": {
            "description": "The start of the phone call",
            "type": "string",
            "format": "date-time"
          },
          "end_date_time": {
            "description": "The end of the phone call",
            "type": "string",
            "format": "date-time"
          },
          "transcript": {
            "description": "The transcript",
            "type": "string"
          },
          "customer_id": {
            "description": "The customer that this phone call is associated with",
            "type": "string"
          },
          "phone_number": {
            "description": "The phone number that the call came from",
            "type": "string"
          },
          "job_id": {
            "description": "The job that this phone call is associated with",
            "type": "string"
          },
          "employee_id": {
            "description": "The employee that accepted the phone call",
            "type": "string"
          }
        }
      },
      "UpdatePhoneCallRequestBody": {
        "type": "object",
        "properties": {
          "end_date_time": {
            "description": "The end of the phone call",
            "type": "string",
            "format": "date-time"
          },
          "transcript": {
            "description": "The transcript",
            "type": "string"
          },
          "employee_id": {
            "description": "The employee that accepted the phone call",
            "type": "string"
          },
          "job_id": {
            "description": "The job that this phone call is associated with",
            "type": "string"
          },
          "customer_id": {
            "description": "The customer that this phone call is associated with",
            "type": "string"
          }
        }
      },
      "GetPhoneCallsResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1
          },
          "page_size": {
            "type": "integer",
            "example": 10
          },
          "phone_calls": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PhoneCall" }
          },
          "total_items": {
            "type": "integer",
            "example": 100
          },
          "total_pages": {
            "type": "integer",
            "example": 10
          }
        }
      },
      "WebsocketMessageType": {
        "type": "string",
        "enum": [
          "phone_call_started",
          "phone_call_ended",
          "phone_call_transcript",
          "phone_call_assigned",
          "phone_call_accepted",
          "phone_call_token",
          "client_connected"
        ]
      },
      "WebsocketPhoneCallStartedPayload": {
        "type": "object",
        "description": "Broadcast by the server to all clients to inform them of a new phone call becoming available",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebsocketMessageType"
          },
          "phone_call_id": {
            "type": "string",
            "description": "The unique identifier for the phone call"
          },
          "start_date_time": {
            "type": "string",
            "description": "The start of the phone call"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number that the call came from"
          }
        },
        "required": [
          "phone_call_id",
          "phone_number",
          "start_date_time",
          "event"
        ]
      },
      "WebsocketPhoneCallAcceptedPayload": {
        "type": "object",
        "description": "Sent by the client to the server to accept a phone call and assign it to ones self",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebsocketMessageType"
          },
          "phone_call_id": {
            "type": "string",
            "description": "The unique identifier for the phone call"
          },
          "employee_id": {
            "type": "string",
            "description": "The unique identifier for the employee that accepted the phone call"
          }
        },
        "required": ["phone_call_id", "employee_id", "event"]
      },
      "WebsocketPhoneCallAssignedPayload": {
        "type": "object",
        "description": "Sent by the server to all listening clients when a phone call is assigned to an employee, in order to take it off the queue of other employees.",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebsocketMessageType"
          },
          "phone_call_id": {
            "type": "string",
            "description": "The unique identifier for the phone call"
          },
          "employee_id": {
            "type": "string",
            "description": "The unique identifier for the employee that accepted the phone call"
          }
        },
        "required": ["phone_call_id", "employee_id", "event"]
      },
      "WebsocketPhoneCallTokenPayload": {
        "type": "object",
        "description": "Sent by the server to the assigned client to inform them of new tokens being processed on the ongoing phone call",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebsocketMessageType"
          },
          "phone_call_id": {
            "type": "string",
            "description": "The unique identifier for the phone call"
          },
          "token": {
            "type": "string",
            "description": "The token for the phone call"
          }
        },
        "required": ["phone_call_id", "token", "event"]
      },
      "WebsocketPhoneCallTranscriptPayload": {
        "type": "object",
        "description": "Sent by the server to the assigned client to inform them of the current transcript-to-date for the phone call",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebsocketMessageType"
          },
          "phone_call_id": {
            "type": "string",
            "description": "The unique identifier for the phone call"
          },
          "transcript": {
            "type": "string",
            "description": "The current transcript-to-date for the phone call"
          }
        },
        "required": ["phone_call_id", "transcript", "event"]
      },
      "WebsocketPhoneCallEndedPayload": {
        "type": "object",
        "description": "Broadcast by the server to all clients to inform them of a phone call ending",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebsocketMessageType"
          },
          "phone_call_id": {
            "type": "string",
            "description": "The unique identifier for the phone call"
          },
          "end_date_time": {
            "type": "string",
            "description": "The end of the phone call"
          }
        },
        "required": ["phone_call_id", "end_date_time", "event"]
      },
      "WebsocketClientConnectedPayload": {
        "type": "object",
        "description": "Sent by the client to the server to establish an initial connection and inform them of their employee ID",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebsocketMessageType"
          },
          "employee_id": {
            "type": "string",
            "description": "The unique identifier for the employee connection"
          },
          "token": {
            "type": "string",
            "description": "The JWT token for the employee connection, which must have been obtained from the API"
          }
        },
        "required": ["token", "employee_id", "event"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Detailed error message"
          }
        }
      }
    }
  }
}
