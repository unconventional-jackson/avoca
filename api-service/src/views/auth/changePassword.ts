import { NodeLogger } from '@unconventional-code/observability-sdk';
import {
  AuthChangePasswordRequestBody,
  ErrorResponse,
} from '@unconventional-jackson/avoca-internal-api';
import { compare, hash } from 'bcrypt';
import { Request, Response } from 'express';

import { UserModel } from '../../models/models/Users';

/**
 * TODO: Not generated by swagger?
 */
export type AuthChangePasswordResponseBody = {
  message: string;
};

export async function changePasswordView(
  req: Request<unknown, unknown, AuthChangePasswordRequestBody>,
  res: Response<AuthChangePasswordResponseBody | ErrorResponse>
) {
  const log = new NodeLogger({
    correlation: res.locals.correlation,
    name: 'views/Auth/changePassword',
  });

  try {
    if (!req.body.email) {
      res.status(400).json({ message: 'Missing email in the body.' });
      return;
    }
    const email = req.body.email;

    if (!req.body.currentPassword) {
      res.status(400).json({ message: 'Missing currentPassword in the body.' });
      return;
    }
    const currentPassword = req.body.currentPassword;

    if (!req.body.newPassword) {
      res.status(400).json({ message: 'Missing newPassword in the body.' });
      return;
    }
    const newPassword = req.body.newPassword;

    const user = await UserModel.findOne({ where: { email } });

    if (!user) {
      res.status(400).json({ error: 'User not found' });
      return;
    }

    if (!user.authPasswordHash) {
      res.status(400).json({ error: 'User has no password' });
      return;
    }

    const passwordMatch = await compare(currentPassword, user.authPasswordHash);
    if (!passwordMatch) {
      res.status(400).json({ error: 'Password does not match' });
      return;
    }

    const authPasswordHash = await hash(newPassword, 10);
    await user.update({
      authPasswordHash,
    });

    res.status(200).json({ message: 'Password updated' });
    return;
  } catch (error) {
    log.error(error);
    res.status(500).json({ error: String(error) });
  }
}
